{"version":3,"sources":["../src/nsoap-express.js"],"names":["app","options","_urlPrefix","urlPrefix","endsWith","req","res","next","body","path","url","query","headers","startsWith","strippedPath","substring","length","dicts","parseHeaders","parseQuery","parseBody","index","args","then","result","alwaysUseJSON","status","send","json","error","identifierRegex","Object","keys","reduce","acc","key","val","test","JSON","parse"],"mappings":";;;;;;kBAuBe,UAASA,GAAT,EAA4B;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACzC,MAAMC,aAAaD,QAAQE,SAAR,IAAqB,GAAxC;AACA,MAAMA,YAAYD,WAAWE,QAAX,CAAoB,GAApB,IAA2BF,UAA3B,GAA2CC,SAA3C,MAAlB;;AAEA,SAAO,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzB,QAAMC,OAAOP,QAAQO,IAAR,GAAeP,QAAQO,IAAR,CAAaH,GAAb,CAAf,GAAmCA,IAAIG,IAApD;AADyB,QAEjBC,IAFiB,GAEaJ,GAFb,CAEjBI,IAFiB;AAAA,QAEXC,GAFW,GAEaL,GAFb,CAEXK,GAFW;AAAA,QAENC,KAFM,GAEaN,GAFb,CAENM,KAFM;AAAA,QAECC,OAFD,GAEaP,GAFb,CAECO,OAFD;;AAGzB,QAAIH,KAAKI,UAAL,CAAgBV,SAAhB,CAAJ,EAAgC;AAC9B,UAAMW,eAAeL,KAAKM,SAAL,CAAeZ,UAAUa,MAAzB,CAArB;AACA,UAAMC,QAAQ,CACZhB,QAAQiB,YAAR,GACIjB,QAAQiB,YAAR,CAAqBN,OAArB,CADJ,GAEIM,aAAaN,OAAb,CAHQ,EAIZX,QAAQkB,UAAR,GAAqBlB,QAAQkB,UAAR,CAAmBR,KAAnB,CAArB,GAAiDQ,WAAWR,KAAX,CAJrC,EAKZV,QAAQmB,SAAR,GAAoBnB,QAAQmB,SAAR,CAAkBZ,IAAlB,CAApB,GAA8CY,UAAUZ,IAAV,CALlC,CAAd;;AAQA,2BAAMR,GAAN,EAAWc,YAAX,EAAyBG,KAAzB,EAAgC;AAC9BI,eAAOpB,QAAQoB,KAAR,IAAiB,OADM;AAE9BC,cAAM,CAACjB,GAAD,EAAMC,GAAN,EAAW,EAAX;AAFwB,OAAhC,EAGGiB,IAHH,CAIE;AAAA,eACE,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,CAACvB,QAAQwB,aAAvC,GACInB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CADJ,GAEIlB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBJ,MAArB,CAHN;AAAA,OAJF,EAQE;AAAA,eAASlB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,KAArB,CAAT;AAAA,OARF;AAUD,KApBD,MAoBO;AACLtB;AACD;AACF,GA1BD;AA2BD,C;;AAtDD;;;;;;AAEA,IAAMuB,kBAAkB,4BAAxB;;AAEA,SAASZ,YAAT,CAAsBN,OAAtB,EAA+B;AAC7B,SAAOA,OAAP;AACD;;AAED,SAASO,UAAT,CAAoBR,KAApB,EAA2B;AACzB,SAAOoB,OAAOC,IAAP,CAAYrB,KAAZ,EAAmBsB,MAAnB,CAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C,QAAMC,MAAMzB,MAAMwB,GAAN,CAAZ;AACAD,QAAIC,GAAJ,IACEC,QAAQ,MAAR,IAAkBA,QAAQ,OAA1B,GACIA,QAAQ,MADZ,GAEIN,gBAAgBO,IAAhB,CAAqBD,GAArB,SAA+BA,GAA/B,GAAuCE,KAAKC,KAAL,CAAWH,GAAX,CAH7C;AAIA,WAAOF,GAAP;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD;;AAED,SAASd,SAAT,CAAmBZ,IAAnB,EAAyB;AACvB,SAAOA,IAAP;AACD","file":"nsoap-express.js","sourcesContent":["import nsoap from \"nsoap\";\n\nconst identifierRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nfunction parseHeaders(headers) {\n  return headers;\n}\n\nfunction parseQuery(query) {\n  return Object.keys(query).reduce((acc, key) => {\n    const val = query[key];\n    acc[key] =\n      val === \"true\" || val === \"false\"\n        ? val === \"true\"\n        : identifierRegex.test(val) ? `${val}` : JSON.parse(val);\n    return acc;\n  }, {});\n}\n\nfunction parseBody(body) {\n  return body;\n}\n\nexport default function(app, options = {}) {\n  const _urlPrefix = options.urlPrefix || \"/\";\n  const urlPrefix = _urlPrefix.endsWith(\"/\") ? _urlPrefix : `${urlPrefix}/`;\n\n  return (req, res, next) => {\n    const body = options.body ? options.body(req) : req.body;\n    const { path, url, query, headers } = req;\n    if (path.startsWith(urlPrefix)) {\n      const strippedPath = path.substring(urlPrefix.length);\n      const dicts = [\n        options.parseHeaders\n          ? options.parseHeaders(headers)\n          : parseHeaders(headers),\n        options.parseQuery ? options.parseQuery(query) : parseQuery(query),\n        options.parseBody ? options.parseBody(body) : parseBody(body)\n      ];\n\n      nsoap(app, strippedPath, dicts, {\n        index: options.index || \"index\",\n        args: [req, res, {}]\n      }).then(\n        result =>\n          typeof result === \"string\" && !options.alwaysUseJSON\n            ? res.status(200).send(result)\n            : res.status(200).json(result),\n        error => res.status(400).send(error)\n      );\n    } else {\n      next();\n    }\n  };\n}\n"]}
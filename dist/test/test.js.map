{"version":3,"sources":["../../src/test/test.js"],"names":["routes","about","app","use","describe","it","resp","get","text","should","equal"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,SAAS;AACb;AACA;AACA;AACAC,OAJa,mBAIL;AACN,WAAO,kBAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9Da,CAAf;;AAiEA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,4BAAMH,MAAN,CAAR;AACA;;AAEAI,SAAS,eAAT,EAA0B,YAAM;AAC9BC,KAAG,iCAAH,oBAAsC,aAAY;AAChD,QAAMC,OAAO,MAAM,yBAAQJ,GAAR,EAAaK,GAAb,CAAiB,QAAjB,CAAnB;AACAD,SAAKE,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,CAAuB,kBAAvrID","file":"test.js","sourcesContent":["import nsoap from \"../nsoap-express\";\nimport should from \"should\";\nimport express from \"express\";\nimport request from \"supertest\";\n\nconst routes = {\n  // index() {\n  //   return \"Home page!\";\n  // },\n  about() {\n    return \"NSOAP Test Suite\";\n  }\n  // static: \"NSOAP Static File\",\n  // unary(arg) {\n  //   return arg + 10;\n  // },\n  // binary(x, y) {\n  //   return x + y;\n  // },\n  // namespace: {\n  //   binary(x, y) {\n  //     return x + y;\n  //   }\n  // },\n  // nested: {\n  //   namespace: {\n  //     binary(x, y) {\n  //       return x + y;\n  //     }\n  //   }\n  // },\n  // json(input) {\n  //   return input.x + 20;\n  // },\n  // throw(a) {\n  //   throw new Error(\"Exception!\");\n  // },\n  // chainAdder1(x) {\n  //   return {\n  //     chainAdder2(y) {\n  //       return x + y;\n  //     }\n  //   };\n  // },\n  // infer(_bool, _num, _str) {\n  //   return {\n  //     _bool,\n  //     _num,\n  //     _str\n  //   };\n  // },\n  // promiseToAdd(x, y) {\n  //   return Promise.resolve(x + y);\n  // },\n  // functionOnPromise(x, y) {\n  //   return Promise.resolve({\n  //     adder(z) {\n  //       return x + y + z;\n  //     }\n  //   });\n  // },\n  // defaultFunction(x, y) {\n  //   return {\n  //     index() {\n  //       return x + y\n  //     }\n  //   }\n  // }\n};\n\nconst app = express();\napp.use(nsoap(routes));\n//app.get(\"/about\", (req, res) => res.send(\"Hello\"))\n\ndescribe(\"NSOAP Express\", () => {\n  it(\"Calls a parameter-less function\", async () => {\n    const resp = await request(app).get(\"/about\");\n    resp.text.should.equal(\"NSOAP Test Suite\");\n  });\n\n  // it(\"Gets the value of a property\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"static\", [], {}, handler.then);\n  //   handler.getResult().should.equal(\"NSOAP Static File\");\n  // });\n  //\n  // it(\"Calls a unary function\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"unary(10)\", [], {}, handler.then);\n  //   handler.getResult().should.equal(20);\n  // });\n  //\n  // it(\"Throws an exception\", async () => {\n  //   const handler = getMockHandler();\n  //   const result = nsoap(app, \"throw(10)\", [], {}, handler.then);\n  //   return result.then(\n  //     () => {\n  //       throw new Error(\"Exception was expected but not thrown.\");\n  //     },\n  //     err => {}\n  //   );\n  // });\n  //\n  // it(\"Calls a binary function\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"binary(10,20)\", [], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Calls a unary function with variables\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"unary(x)\", [{ x: 10 }], {}, handler.then);\n  //   handler.getResult().should.equal(20);\n  // });\n  //\n  // it(\"Calls a binary function with variables\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"binary(x,y)\", [{ x: 10, y: 20 }], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Calls a binary function with literals and variables\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"binary(x,20)\", [{ x: 10 }], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Calls a binary function in a namespace\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"namespace.binary(10,20)\", [], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Calls a binary function in a nested namespace\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"nested.namespace.binary(10,20)\", [], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Accepts JSON arguments\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"json(obj)\", [{ obj: { x: 10 } }], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Adds parenthesis if omitted\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"about\", [], {}, handler.then);\n  //   handler.getResult().should.equal(\"NSOAP Test Suite\");\n  // });\n  //\n  // it(\"Calls the default function\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"\", [], { index: \"index\" }, handler.then);\n  //   handler.getResult().should.equal(\"Home page!\");\n  // });\n  //\n  // it(\"Calls chained functions\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"chainAdder1(10).chainAdder2(20)\", [], {}, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Infers types\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"infer(true, 20, Hello)\", [], {}, handler.then);\n  //   const result = handler.getResult();\n  //   (typeof result._bool).should.equal(\"boolean\");\n  //   (typeof result._num).should.equal(\"number\");\n  //   (typeof result._str).should.equal(\"string\");\n  // });\n  //\n  // it(\"Is Case-sensitive\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"unary(x)\", [{ X: 100, x: 10 }], {}, handler.then);\n  //   handler.getResult().should.equal(20);\n  // });\n  //\n  // it(\"Resolves a Promise\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(\n  //     app,\n  //     \"promiseToAdd(x,y)\",\n  //     [{ x: 10, y: 20 }],\n  //     {},\n  //     handler.then\n  //   );\n  //   handler.getResult().should.equal(30);\n  // });\n  //\n  // it(\"Calls a function on the resolved value of a Promise\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(\n  //     app,\n  //     \"functionOnPromise(x,y).adder(100)\",\n  //     [{ x: 10, y: 20 }],\n  //     {},\n  //     handler.then\n  //   );\n  //   handler.getResult().should.equal(130);\n  // });\n  //\n  // it(\"Calls default function on object\", async () => {\n  //   const handler = getMockHandler();\n  //   await nsoap(app, \"defaultFunction(10,20)\", [], { index: \"index\" }, handler.then);\n  //   handler.getResult().should.equal(30);\n  // });\n});\n"]}